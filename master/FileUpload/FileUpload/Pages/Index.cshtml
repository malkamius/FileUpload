@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .formcontainer {
        width: 500px;
        margin: 0 auto;
    }

    form {
        margin-top: 50px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 5px;
    }

    input[type=text], select, textarea {
        width: 100%;
        padding: 2px;
        border: 1px solid #ccc;
        box-sizing: border-box;
        margin-top: 2px;
        margin-bottom: 12px;
        resize: vertical;
    }

    input[type=submit] {
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border: none;
        cursor: pointer;
    }

        input[type=submit]:hover {
            background-color: #45a049;
        }

    h2 {
        color: #2c3e50;
    }

    .upload-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        margin-bottom: 16px;
        cursor: pointer;
        overflow: scroll;
        
        height: 150px;
        
    }

    button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        margin-bottom: 16px;
    }

    .invalid-feedback {
        color: red;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    #file-list-container {
        width: 500px;
        height: 200px;
        overflow: scroll;
    }

    .selectedfile {
        background-color: #cce5ff;
        cursor: pointer;
    }

    ul {
    }

    li {
        text-align: left;
    }
</style>

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }
</style>

<div class="text-center">
    @*<h1 class="display-4">Welcome</h1>*@

    <div class="formcontainer">
        <form method="post" asp-route="Index" enctype="multipart/form-data" onsubmit="submitForm(event)" id="OrderForm">
            <input name="__RequestVerificationToken" type="hidden" value="">
            <div class="form-row">
                <div>
                    <h2>Contact Info</h2>
                    <input asp-for="Order.Name" type="text" id="Name" name="Name" placeholder="Your name.." value="@Model.Request.Cookies["name"]">
                    <input asp-for="Order.PhoneNumber" type="text" id="PhoneNumber" name="PhoneNumber" placeholder="Your phone number.." value="@Model.Request.Cookies["phonenumber"]">
                    <input asp-for="Order.EmailAddress" type="text" id="EmailAddress" name="EmailAddress" placeholder="Your email.." value="@Model.Request.Cookies["emailaddress"]">
                </div>
                <div>
                    <h2>Company Info</h2>
                    <input asp-for="Order.CompanyName" type="text" id="CompanyName" name="CompanyName" placeholder="Company name.." value="@Model.Request.Cookies["companyname"]">
                    <input asp-for="Order.Address1" type="text" id="Address1" name="Address1" placeholder="Address 1.." value="@Model.Request.Cookies["address1"]">
                    <input asp-for="Order.Address2" type="text" id="Address2" name="Address2" placeholder="Address 2.." value="@Model.Request.Cookies["address2"]">
                    <input asp-for="Order.City" type="text" id="City" name="City" placeholder="City.." value="@Model.Request.Cookies["city"]">
                    <input asp-for="Order.State" type="text" id="State" name="State" placeholder="State.." value="@Model.Request.Cookies["state"]">
                    <input asp-for="Order.ZipCode" type="text" id="ZipCode" name="ZipCode" placeholder="Zip.." value="@Model.Request.Cookies["zipcode"]">
                </div>
            </div>
            <div class="form-row">
                <div>
                    <h2>Time Constraints</h2>
                    <input asp-for="Order.DateDue" type="date" id="DateDue" name="DateDue">
                    <input asp-for="Order.LatestTimeDue" type="time" id="LatestTimeDue" name="LatestTimeDue">
                </div>
                <div>
                    <h2>Accounting Details</h2>
                    <input asp-for="Order.ProjectNumber" type="text" id="ProjectNumber" name="ProjectNumber" placeholder="Project #..">
                    <input asp-for="Order.PONumber" type="text" id="PONumber" name="PONumber" placeholder="PO #..">
                    <input asp-for="Order.ProjectName" type="text" id="ProjectName" name="ProjectName" placeholder="Project name..">
                </div>
            </div>
            <div>
                <h2>Production Specifics</h2>
                <textarea asp-for="Order.Notes" id="Notes" name="Notes" placeholder="Special Instructions.."></textarea>
            </div>

            <div>
                <h2>File Upload</h2>
                <div class="upload-area" id="drop-area">
                    Drag and Drop Files Here
                    <ul id="file-list"></ul>
                </div>
                <input type="file" id="FileSelector" name="FileSelector[]" multiple>
                <button type="button" id="remove-button">Remove Selected Items</button>
                <div></div>
            </div>
            <input type="submit" value="Submit">
        </form>
    </div>
    <div id="statusModal" class="modal">
        <div class="modal-content">
            <p id="statusMessage"></p>
            <p id="fileUploadStatus"></p>
            <p id="totalStatus"></p>
        </div>
    </div>
</div>

@*Begin of form validation*@
<script>
    $(document).ready(function () {
        $('form').validate({
            rules: {
                Name: {
                    required: true,
                    minlength: 2
                },
                PhoneNumber: {
                    required: true,
                    minlength: 10,
                    number: true
                },
                EmailAddress: {
                    required: true,
                    email: true
                },
                CompanyName: {
                    required: true,
                },
                Address1: {
                    required: true,
                },
                City: {
                    required: true,
                },
                State: {
                    required: true,
                },
                ZipCode: {
                    required: true,
                    minlength: 5,
                    number: true
                },
                DueDate: {
                    required: false,
                    date: true
                },
                LatestDueTime: {
                    required: false,
                },
                ProjectNumber: {
                    required: false,
                },
                PONumber: {
                    required: false,
                },
                ProjectName: {
                    required: false,
                },
                Notes: {
                    required: false,
                }
            },
            messages: {
            },
            errorElement: 'div',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                error.insertAfter(element);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid').removeClass('is-valid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).addClass('is-valid').removeClass('is-invalid');
            }
        });
    });
</script>
@*End of form validation*@

@*Begin file input handling/remove file handling*@
<script>
    const $fileSelector = $('#FileSelector');
    const $fileList = $('#file-list');
    const $removeButton = $('#remove-button');

    $fileSelector.on('change', function (e) {
        var files = $fileSelector.get(0).files;


        for (var i = 0; i < files.length; i++) {
            var item = files[i];
            const $li = $('<li>')
                .text(item.name)
                .attr('data-path', item.name)
                .attr('data-attachment', item);
            $fileList.append($li);
            $li.get(0).attachment = item;
        }
        $fileSelector.val('');
    });

    $fileList.on('click', 'li', function () {
        $(this).toggleClass('selectedfile');
    });

    $removeButton.on('click', function (e) {

        $('.selectedfile').each(function () {
            const selectedfilePath = $(this).data('path');
            const ul = $(this).next('ul');// $(this).data('ul');
            if (ul.length == 1) {
                ul.remove();
            }
            $('.selectedfile').remove();
        });
    });
</script>
@*End file input handling/remove file handling*@

@*Handle form submission*@
<script>
    var fileInformation = [];
    var attachments = [];
    var fileCount = 0;
    var processedFileCount = 0;
    function submitForm(event) {
        event.preventDefault(); // Prevent the default form submission
        EnableDisableForm(false);
        UpdateStatus("Initializing...", "0%", "0%");
        ShowHideStatus(true);
        // Get the original form
        var originalForm = document.getElementById("OrderForm");

        // Create a new form copy of original
        var newForm = new FormData(originalForm);

        newForm.append(originalForm.elements[0].name, originalForm.elements[0].value);

        function CreateFileInformation(filename, length, type) {
            this.FileName = filename;
            this.Length = length;
            this.ContentType = type;
        }

        fileInformation = [];
        attachments = [];
        fileCount = 0;
        processedFileCount = 0;

        function handleProcessedFile(file)
        {
            processedFileCount++;
           
        }

        async function handleFile(file, index)
        {
            await file.file(function (item) {
                var onefile = new CreateFileInformation(item.name, item.size, item.type);
                fileInformation[index] = (onefile);
                attachments[index] = (item);
            });
            handleProcessedFile(file);
        }
        $('li').each(function () {
            var file = $(this).data('attachment');

            if (file === undefined) return;

            file = $(this).get(0).attachment;

            if (file.isFile) {
                fileCount++;
                handleFile(file, fileCount - 1);
                
            }
            else if (file.isFile === undefined) {
                fileCount++;
                var onefile = new CreateFileInformation(file.name, file.size, file.type);
                fileInformation.push(onefile);
                attachments.push(file);  
            }
        });

        function CheckFilesHandled()
        {
            if (processedFileCount >= fileCount) {
                var jsonString = JSON.stringify(fileInformation);
                newForm.append("FileInformation", jsonString);
                UpdateStatus("Submitting order...", "0%", "0%");
                var formSubmissionRequest = new XMLHttpRequest();

                formSubmissionRequest.onreadystatechange = function () {
                    if (formSubmissionRequest.readyState == 4) {
                        if (formSubmissionRequest.status == 200) {
                            HandleAwaitingFiles(formSubmissionRequest, attachments);
                        }
                        else if (formSubmissionRequest.status == 400) {
                            HandleSubmissionFailure(formSubmissionRequest);
                        }
                        else {
                            HandleSubmissionFailure(formSubmissionRequest);
                        }
                    }
                };
                formSubmissionRequest.open(originalForm.method, originalForm.action, true);
                formSubmissionRequest.send(newForm);
            }
            else
                setTimeout(CheckFilesHandled, 500);
        }
        setTimeout(CheckFilesHandled, 500);
        
    }

    function FileUpload(OrderInsertResults) {
        this.OrderInsertResults = OrderInsertResults;
        this.FileIndex = 0;
        this.WriteIndex = 0;
        this.ChunkSize = 10240000;
        this.TotalWritten = 0;
        this.TotalLength = 0;

        this.SendFiles = function (Upload) {
            if(Upload.FileIndex == 0 && Upload.WriteIndex == 0)
            {
                UpdateStatus("Starting file upload...", "0%", "0%");
            }

            var formData = new FormData();
            formData.append('OrderId', Upload.OrderInsertResults.orderId);
            formData.append('UploadFileKey', Upload.OrderInsertResults.uploadFileKey);
            formData.append('FileId', Upload.OrderInsertResults.fileInformation[Upload.FileIndex].fileId);


            formData.action = "/UploadFile";
            formData.method = "POST";

            var file = OrderInsertResults.fileInformation[Upload.FileIndex].Blob;

            formData.append("file[]", file.slice(Upload.WriteIndex, Upload.WriteIndex + Upload.ChunkSize), file.name);
            var ChunkUploadRequest = new XMLHttpRequest();


            ChunkUploadRequest.open(formData.method, formData.action, true);
            ChunkUploadRequest.send(formData);

            ChunkUploadRequest.onreadystatechange = function () {
                if (ChunkUploadRequest.readyState == 4) {
                    if (ChunkUploadRequest.status == 200) {
                        var wasWriteIndex = Upload.WriteIndex;
                        Upload.WriteIndex = Upload.WriteIndex + Upload.ChunkSize;
                        
                        if (Upload.WriteIndex > file.size) {
                            Upload.FileIndex++;
                            UpdateStatus("File " + (Upload.FileIndex + 1) + "/" + Upload.OrderInsertResults.fileInformation.length, "0%", Math.floor(Upload.TotalWritten / Upload.TotalLength * 100) + "%");
                            Upload.WriteIndex = 0;
                        }
                        else
                        {
                            Upload.TotalWritten += Math.min(Upload.ChunkSize, OrderInsertResults.fileInformation[Upload.FileIndex].Blob.size - wasWriteIndex);
                            UpdateStatus("File " + (Upload.FileIndex + 1) + "/" + Upload.OrderInsertResults.fileInformation.length, Math.floor(Upload.WriteIndex / file.size * 100) + "%", Math.floor(Upload.TotalWritten / Upload.TotalLength * 100) + "%");
                        }

                        if (Upload.FileIndex >= Upload.OrderInsertResults.fileInformation.length) {
                            UpdateStatus("File " + (Upload.FileIndex) + "/" + Upload.OrderInsertResults.fileInformation.length, "100%", "100%");
                            //alert("All done.");
                            setTimeout(() => {
                                window.location.href = "/OrderSuccessful?id=" + Upload.OrderInsertResults.orderId + "&viewOrderGuid=" + Upload.OrderInsertResults.viewOrderKey;
                            }, 1000);
                            //ShowHideStatus(false);
                            //EnableDisableForm(true);
                        }
                        else {
                            Upload.SendFiles(Upload);
                        }
                    }
                    else if (ChunkUploadRequest.status == 400) {
                        alert("400 on chunk upload request");
                        ShowHideStatus(false);
                        EnableDisableForm(true);
                    }
                    else {
                        alert(ChunkUploadRequest.responseText);
                        ShowHideStatus(false);
                        EnableDisableForm(true);
                    }
                }
            };
        }
    }

    var upload;

    function HandleAwaitingFiles(ajax, attachments) {
        var response = ajax.responseText;
        var jsonObject = JSON.parse(response);
        var totalLength = 0;
        for (var i = 0; i < jsonObject.fileInformation.length; i++) {
            jsonObject.fileInformation[i].Blob = attachments[i];
            totalLength += attachments[i].size;
        }
        upload = new FileUpload(jsonObject);
        upload.TotalLength = totalLength;
        upload.SendFiles(upload);
    }

    function HandleSubmissionFailure(ajax) {

    }

    function HandleUploadFailure(ajax) {

    }

    function ChunkUploadCallback(ChunkUploadRequest) {

    }

    function HandleUploadSuccess(ajax) {

    }

    function EnableDisableForm(enabled) {
        if (enabled) {
            $(this).find(':input').prop('disabled', false);
        }
        else
            $(this).find(':input').prop('disabled', true);
    }

    function ShowHideStatus(show) {
        if (show)
            $('#statusModal').css('display', 'block');
        else
            $('#statusModal').css('display', 'none');
    }

    function UpdateStatus(message, percentIndividual, percentTotal)
    {
        const $statusParagraph = $('#statusMessage');
        const $percentIndividual = $('#fileUploadStatus');
        const $percentTotal = $('#totalStatus');

        $statusParagraph.text(message);
        $percentIndividual.text("Individual File: " + percentIndividual);
        $percentTotal.text("Total Upload: " + percentTotal);
    }
</script>
@*End Handle form submission*@

@*Handle Drag & Drop*@
<script>
    const $dropArea = $('#drop-area');
    $dropArea.on('dragover', function (e) {
        e.preventDefault();
        e.stopPropagation();
        e.originalEvent.dataTransfer.dropEffect = 'copy';
    });

    $dropArea.on('drop', async function (e) {
        e.preventDefault();
        e.stopPropagation();

        //$fileList.empty(); // Clear the file list
        const items = e.originalEvent.dataTransfer.items;

        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            scanFiles(item.webkitGetAsEntry(), $fileList, "");
        }
    });

    function scanFiles(item, container, parentPath) {
        const filePath = parentPath + '/' + item.name;
        const $li = $('<li>')
            .text(item.name)
            .attr('data-path', filePath)
            .attr('data-attachment', item);
        $li.get(0).attachment = item;
        container.append($li);
        var directoryContainer = false;
        if (item.isDirectory) {
            let directoryReader = item.createReader();
            directoryContainer = $('<ul>')
                .attr('data-path', filePath); //document.createElement("ul");
            container.append(directoryContainer);
            directoryReader.readEntries((entries) => {
                entries.forEach((entry) => {
                    scanFiles(entry, directoryContainer, parentPath + "/" + entry.name);
                });
            });
        }
        if (directoryContainer != false)
            $li.attr('data-ul', directoryContainer)
    }
</script>
@*End Handle Drag & Drop*@